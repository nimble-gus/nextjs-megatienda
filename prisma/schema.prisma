generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model usuarios {
  id           Int       @id @default(autoincrement())
  nombre       String
  correo       String    @unique
  password     String    @map("contraseña")
  rol          Rol?
  creado_en    DateTime? @default(now()) @db.Timestamp(0)
  carrito      carrito[]
  ordenes      ordenes[]
  validaciones ordenes[] @relation("validaciones")
}

model categorias {
  id        Int         @id @default(autoincrement())
  nombre    String
  productos productos[]
}

model colores {
  id           Int             @id @default(autoincrement())
  nombre       String
  codigo_hex   String
  carrito      carrito[]
  ordenDetalle orden_detalle[]
  stock        stock_detalle[]
}

model productos {
  id           Int                   @id @default(autoincrement())
  sku          String
  nombre       String
  descripcion  String
  url_imagen   String?
  categoria_id Int
  featured     Boolean               @default(false)
  carrito      carrito[]
  imagenes     imagenes_producto[]
  ordenDetalle orden_detalle[]
  categoria    categorias            @relation(fields: [categoria_id], references: [id])
  destacado    productos_destacados?
  stock        stock_detalle[]

  @@index([categoria_id], map: "productos_categoria_id_fkey")
}

model imagenes_producto {
  id          Int       @id @default(autoincrement())
  producto_id Int
  url_imagen  String
  producto    productos @relation(fields: [producto_id], references: [id])

  @@index([producto_id], map: "imagenes_producto_producto_id_fkey")
}

model stock_detalle {
  id          Int       @id @default(autoincrement())
  producto_id Int
  color_id    Int
  cantidad    Int
  precio      Float
  color       colores   @relation(fields: [color_id], references: [id])
  producto    productos @relation(fields: [producto_id], references: [id])

  @@index([color_id], map: "stock_detalle_color_id_fkey")
  @@index([producto_id], map: "stock_detalle_producto_id_fkey")
}

model carrito {
  id          Int       @id @default(autoincrement())
  usuario_id  Int
  producto_id Int
  color_id    Int
  cantidad    Int
  color       colores   @relation(fields: [color_id], references: [id])
  producto    productos @relation(fields: [producto_id], references: [id])
  usuario     usuarios  @relation(fields: [usuario_id], references: [id])

  @@index([color_id], map: "carrito_color_id_fkey")
  @@index([producto_id], map: "carrito_producto_id_fkey")
  @@index([usuario_id], map: "carrito_usuario_id_fkey")
}

model ordenes {
  id                             Int             @id @default(autoincrement())
  usuario_id                     Int?
  fecha                          DateTime        @default(now())
  total                          Float
  estado                         String
  codigo_orden                   String          @unique
  nombre_cliente                 String?
  email_cliente                  String?
  telefono_cliente               String?
  direccion_cliente              String?         @db.Text
  municipio_cliente              String?
  codigo_postal_cliente          String?
  nit_cliente                    String?         @db.VarChar(20)
  nombre_quien_recibe            String?
  subtotal                       Float
  costo_envio                    Float
  comprobante_transferencia      String?
  fecha_validacion_transferencia DateTime?
  validado_por                   Int?
  notas                          String?         @db.Text
  metodo_pago                    String
  detalle                        orden_detalle[]
  usuario                        usuarios?       @relation(fields: [usuario_id], references: [id], onDelete: Restrict)
  validador                      usuarios?       @relation("validaciones", fields: [validado_por], references: [id])

  @@index([usuario_id], map: "ordenes_usuario_id_fkey")
  @@index([validado_por], map: "ordenes_validado_por_fkey")
}

model orden_detalle {
  id              Int       @id @default(autoincrement())
  orden_id        Int
  producto_id     Int
  color_id        Int
  cantidad        Int
  precio_unitario Float
  color           colores   @relation(fields: [color_id], references: [id])
  orden           ordenes   @relation(fields: [orden_id], references: [id])
  producto        productos @relation(fields: [producto_id], references: [id])

  @@index([color_id], map: "orden_detalle_color_id_fkey")
  @@index([orden_id], map: "orden_detalle_orden_id_fkey")
  @@index([producto_id], map: "orden_detalle_producto_id_fkey")
}

model productos_destacados {
  id           Int       @id @default(autoincrement())
  producto_id  Int       @unique
  orden        Int       @default(0)
  fecha_inicio DateTime  @default(now())
  fecha_fin    DateTime?
  activo       Boolean   @default(true)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  producto     productos @relation(fields: [producto_id], references: [id], onDelete: Cascade)
}

model mensajes_contacto {
  id              Int       @id @default(autoincrement())
  nombre          String
  email           String
  asunto          String
  mensaje         String    @db.Text
  leido           Boolean   @default(false)
  creado_en       DateTime  @default(now())
  respondido      Boolean   @default(false)
  respuesta       String?   @db.Text
  fecha_respuesta DateTime?
}

model hero_images {
  id                  Int      @id @default(autoincrement())
  titulo              String
  subtitulo           String?  @db.Text
  url_imagen          String
  cloudinary_id       String?
  orden               Int      @default(0)
  activo              Boolean  @default(true)
  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime
}

model promo_banners {
  id                  Int      @id @default(autoincrement())
  titulo              String
  descripcion         String?  @db.Text
  url_imagen          String
  cloudinary_id       String?
  enlace              String?
  orden               Int      @default(0)
  activo              Boolean  @default(true)
  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime
}

model session_blacklist {
  id             Int      @id @default(autoincrement())
  session_id     String   @unique
  invalidated_at DateTime @default(now())
  usuario_id     Int?

  @@index([session_id])
  @@index([invalidated_at])
}

model failed_logins {
  id              Int       @id @default(autoincrement())
  email           String
  ip_address      String
  user_agent      String?   @db.Text
  intentos        Int       @default(1)
  bloqueado_hasta DateTime?
  ultimo_intento  DateTime  @default(now())

  @@index([email, ip_address])
  @@index([ultimo_intento])
}

model password_reset_tokens {
  id          Int       @id @default(autoincrement())
  usuario_id  Int
  token       String    @unique
  expira_en   DateTime
  usado       Boolean   @default(false)
  creado_en   DateTime  @default(now())

  @@index([token])
  @@index([usuario_id])
  @@index([expira_en])
}

model email_verification_tokens {
  id          Int       @id @default(autoincrement())
  usuario_id  Int
  token       String    @unique
  expira_en   DateTime
  usado       Boolean   @default(false)
  creado_en   DateTime  @default(now())

  @@index([token])
  @@index([usuario_id])
  @@index([expira_en])
}

model account_activity_log {
  id              Int       @id @default(autoincrement())
  usuario_id      Int?
  accion          String
  detalles        String?   @db.Text
  ip_address      String?
  user_agent      String?   @db.Text
  fecha           DateTime  @default(now())
  exito           Boolean   @default(true)

  @@index([usuario_id])
  @@index([fecha])
  @@index([accion])
}

model rate_limits {
  id              Int       @id @default(autoincrement())
  ip_address      String
  endpoint        String
  intentos        Int       @default(1)
  bloqueado_hasta DateTime?
  ultimo_intento  DateTime  @default(now())

  @@index([ip_address, endpoint])
  @@index([ultimo_intento])
}

// Tabla para tracking de sesiones de clientes
model sesiones_clientes {
  id              Int      @id @default(autoincrement())
  usuario_id      Int      // Cambiado para coincidir con usuarios.id
  session_token   String   @unique @db.VarChar(500)
  device_id       String   @db.VarChar(255) // Identificador único del dispositivo
  device_info     String?  @db.Text // Información del dispositivo (navegador, OS, etc.)
  ip_address      String?  @db.VarChar(45) // IPv4 o IPv6
  user_agent      String?  @db.Text // User agent del navegador
  is_active       Boolean  @default(true)
  created_at      DateTime @default(now())
  last_activity   DateTime @default(now())
  expires_at      DateTime // Cuándo expira la sesión
  
  // Relaciones
  usuario         usuarios @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
  
  @@index([usuario_id])
  @@index([session_token])
  @@index([device_id])
  @@index([is_active])
  @@index([expires_at])
}

enum Rol {
  cliente
  admin
}
