// Script para probar el cach√© de Redis
const BASE_URL = 'http://localhost:3000'; // Puerto 3000 donde est√° corriendo el servidor

async function testRedisCache() {
  console.log('üß™ Probando cach√© de Redis...\n');

  try {
    // 1. Probar productos (primera consulta - desde BD)
    console.log('1Ô∏è‚É£ Primera consulta de productos (desde BD):');
    const products1 = await fetch(`${BASE_URL}/api/catalog/products?page=1&limit=5`);
    const productsData1 = await products1.json();
    console.log('‚úÖ Productos obtenidos:', productsData1.products?.length || 0, 'productos\n');

    // 2. Probar productos nuevamente (desde cach√© Redis)
    console.log('2Ô∏è‚É£ Segunda consulta de productos (desde cach√© Redis):');
    const products2 = await fetch(`${BASE_URL}/api/catalog/products?page=1&limit=5`);
    const productsData2 = await products2.json();
    console.log('‚úÖ Productos obtenidos desde cach√© Redis:', productsData2.products?.length || 0, 'productos\n');

    // 3. Probar filtros (primera consulta - desde BD)
    console.log('3Ô∏è‚É£ Primera consulta de filtros (desde BD):');
    const filters1 = await fetch(`${BASE_URL}/api/catalog/filters`);
    const filtersData1 = await filters1.json();
    console.log('‚úÖ Filtros obtenidos:', filtersData1.categories?.length || 0, 'categor√≠as,', filtersData1.colors?.length || 0, 'colores\n');

    // 4. Probar filtros nuevamente (desde cach√© Redis)
    console.log('4Ô∏è‚É£ Segunda consulta de filtros (desde cach√© Redis):');
    const filters2 = await fetch(`${BASE_URL}/api/catalog/filters`);
    const filtersData2 = await filters2.json();
    console.log('‚úÖ Filtros obtenidos desde cach√© Redis:', filtersData2.categories?.length || 0, 'categor√≠as,', filtersData2.colors?.length || 0, 'colores\n');

    // 5. Probar hero images (primera consulta - desde BD)
    console.log('5Ô∏è‚É£ Primera consulta de hero images (desde BD):');
    const hero1 = await fetch(`${BASE_URL}/api/multimedia/hero`);
    const heroData1 = await hero1.json();
    console.log('‚úÖ Hero images obtenidas:', heroData1.data?.length || 0, 'im√°genes\n');

    // 6. Probar hero images nuevamente (desde cach√© Redis)
    console.log('6Ô∏è‚É£ Segunda consulta de hero images (desde cach√© Redis):');
    const hero2 = await fetch(`${BASE_URL}/api/multimedia/hero`);
    const heroData2 = await hero2.json();
    console.log('‚úÖ Hero images obtenidas desde cach√© Redis:', heroData2.data?.length || 0, 'im√°genes\n');

    // 7. Probar promo banners (primera consulta - desde BD)
    console.log('7Ô∏è‚É£ Primera consulta de promo banners (desde BD):');
    const promo1 = await fetch(`${BASE_URL}/api/multimedia/promo`);
    const promoData1 = await promo1.json();
    console.log('‚úÖ Promo banners obtenidos:', promoData1.data?.length || 0, 'banners\n');

    // 8. Probar promo banners nuevamente (desde cach√© Redis)
    console.log('8Ô∏è‚É£ Segunda consulta de promo banners (desde cach√© Redis):');
    const promo2 = await fetch(`${BASE_URL}/api/multimedia/promo`);
    const promoData2 = await promo2.json();
    console.log('‚úÖ Promo banners obtenidos desde cach√© Redis:', promoData2.data?.length || 0, 'banners\n');

    // 9. Verificar estad√≠sticas del cach√©
    console.log('9Ô∏è‚É£ Estad√≠sticas del cach√© Redis:');
    const cacheStats = await fetch(`${BASE_URL}/api/cache/invalidate`);
    const statsData = await cacheStats.json();
    console.log('‚úÖ Estad√≠sticas del cach√©:', statsData.stats);

    // 10. Probar invalidaci√≥n de cach√©
    console.log('\nüîü Probando invalidaci√≥n de cach√©...');
    const invalidateResponse = await fetch(`${BASE_URL}/api/cache/invalidate`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ type: 'products' })
    });
    const invalidateData = await invalidateResponse.json();
    console.log('‚úÖ Invalidaci√≥n de cach√©:', invalidateData.message);

    console.log('\nüéâ ¬°Todas las pruebas de Redis completadas exitosamente!');

  } catch (error) {
    console.error('‚ùå Error en las pruebas de Redis:', error.message);
  }
}

// Ejecutar pruebas
testRedisCache();
